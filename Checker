function getRow(puzzle, row){
  var myRow = puzzle[row];
  console.log("getRow is running");
  console.log("myRow is " + myRow);
  return myRow;
}

function getColumn(puzzle, column){
  var myColumn = [];
  console.log("getColumn is running");
  
  for(var i=0; i<puzzle.length; i++){
    myColumn.push(puzzle[i][column]);
  }
  console.log("myColumn is " + myColumn);
  return myColumn;
}

function getSection(puzzle, x, y){
  var mySection = [];
  console.log("getSection is running");
  if(x === 0 && y === 0){
    mySection.push(puzzle[0][0], puzzle[0][1], puzzle[0][2], puzzle[1][0], puzzle[1][1], puzzle[1][2], puzzle[2][0], puzzle[2][1], puzzle[2][2]);
  } else if (x === 1 && y === 0){
    mySection.push(puzzle[0][3], puzzle[0][4], puzzle[0][5], puzzle[1][3], puzzle[1][4], puzzle[1][5], puzzle[2][3], puzzle[2][4], puzzle[2][5]);
  } else if (x === 2 && y === 0){
    mySection.push(puzzle[0][6], puzzle[0][7], puzzle[0][8], puzzle[1][6], puzzle[1][7], puzzle[1][8], puzzle[2][6], puzzle[2][7], puzzle[2][8]);
  } else if (x === 0 && y === 1){
    mySection.push(puzzle[3][0], puzzle[3][1], puzzle[3][2], puzzle[4][0], puzzle[4][1], puzzle[4][2], puzzle[5][0], puzzle[5][1], puzzle[5][2]);
  } else if (x === 1 && y === 1){
    mySection.push(puzzle[3][3], puzzle[3][4], puzzle[3][5], puzzle[4][3], puzzle[4][4], puzzle[4][5], puzzle[5][3], puzzle[5][4], puzzle[5][5]);
  } else if (x === 2 && y === 1){
    mySection.push(puzzle[3][6], puzzle[3][7], puzzle[3][8], puzzle[4][6], puzzle[4][7], puzzle[4][8], puzzle[5][6], puzzle[5][7], puzzle[5][8]);
  } else if (x === 0 && y === 2){
    mySection.push(puzzle[6][0], puzzle[6][1], puzzle[6][2], puzzle[7][0], puzzle[7][1], puzzle[7][2], puzzle[8][0], puzzle[8][1], puzzle[8][2]);
  } else if (x === 1 && y === 2){
    mySection.push(puzzle[6][3], puzzle[6][4], puzzle[6][5], puzzle[7][3], puzzle[7][4], puzzle[7][5], puzzle[8][3], puzzle[8][4], puzzle[8][5]);
  } else {
    mySection.push(puzzle[6][6], puzzle[6][7], puzzle[6][8], puzzle[7][6], puzzle[7][7], puzzle[7][8], puzzle[8][6], puzzle[8][7], puzzle[8][8]);
  }
  return mySection;
}

//This function gave me a suprising hard time.  Dont love how i solved it but it works for now ...
function includes1to9(subSection){
  var count = 0;
  var toCompare;
  for(var i=0; i<subSection.length; i++){
    toCompare = subSection[i];
    for(var j=0; j<subSection.length; j++){
      if (toCompare === subSection[j]){
        count ++;
        //count should be 9, 1 for each number, if count is greater than 9 then the number occured twice or more...
        if (count > 9){
        return false;
        }
      }
    }
  }
  return true; 
}

function sudokuIsValid(puzzle){
    var myRow;
    var myColumn;
    var mySection;
    
  for(var i=0; i<puzzle.length; i++){
    myRow = getRow(puzzle, i);
    if (includes1to9(myRow)){
    } else {
      return false;
    }
  }
  
  for(var j=0; j<puzzle.length; j++){
    myColumn = getColumn(puzzle, j);
    if (includes1to9(myColumn)){
      console.log("Column " + j + " is true");
    } else {
      console.log("Row " + j +  " is false!");
      console.log("The false column is " + myColumn);
      return false;
    }
  }

  mySection = getSection(puzzle, 0, 0);
  if(!(includes1to9(mySection))){
    return false;
  }
    mySection = getSection(puzzle, 1, 0);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 2, 0);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 0, 1);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 1, 1);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 1, 2);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 0, 2);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 1, 2);
  if(!(includes1to9(mySection))){
    return false;
  }
      mySection = getSection(puzzle, 2, 2);
  if(!(includes1to9(mySection))){
    return false;
  }
  return true;
}
